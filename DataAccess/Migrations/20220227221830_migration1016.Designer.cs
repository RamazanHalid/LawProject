// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(HukukContext))]
    [Migration("20220227221830_migration1016")]
    partial class migration1016
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperationClaimCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaimCategory", b =>
                {
                    b.Property<int>("OperationClaimCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OperationCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OperationClaimCategoryId");

                    b.ToTable("OperationClaimCategories");
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmsCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LicenceId")
                        .HasColumnType("int");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Entities.Concrete.AccountActivity", b =>
                {
                    b.Property<int>("AccountActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountActivityStatusId")
                        .HasColumnType("int");

                    b.Property<int>("AccountActivityTypeId")
                        .HasColumnType("int");

                    b.Property<float>("Coast")
                        .HasColumnType("real");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LicenceId")
                        .HasColumnType("int");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<float>("TaxCost")
                        .HasColumnType("real");

                    b.HasKey("AccountActivityId");

                    b.HasIndex("AccountActivityStatusId");

                    b.HasIndex("AccountActivityTypeId");

                    b.HasIndex("LicenceId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("AccountActivities");
                });

            modelBuilder.Entity("Entities.Concrete.AccountActivityStatus", b =>
                {
                    b.Property<int>("AccountActivityStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountActivityStatusId");

                    b.ToTable("AccountActivityStatuses");
                });

            modelBuilder.Entity("Entities.Concrete.AccountActivityType", b =>
                {
                    b.Property<int>("AccountActivityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountActivityTypeId");

                    b.ToTable("AccountActivityTypes");
                });

            modelBuilder.Entity("Entities.Concrete.CaseStatus", b =>
                {
                    b.Property<int>("CaseStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourtOfficeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LicenceId")
                        .HasColumnType("int");

                    b.HasKey("CaseStatusId");

                    b.HasIndex("CourtOfficeTypeId");

                    b.HasIndex("LicenceId");

                    b.ToTable("CaseStatuses");
                });

            modelBuilder.Entity("Entities.Concrete.CaseType", b =>
                {
                    b.Property<int>("CaseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourtOfficeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LicenceId")
                        .HasColumnType("int");

                    b.HasKey("CaseTypeId");

                    b.HasIndex("CourtOfficeTypeId");

                    b.HasIndex("LicenceId");

                    b.ToTable("CaseTypes");
                });

            modelBuilder.Entity("Entities.Concrete.Casee", b =>
                {
                    b.Property<int>("CaseeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CaseStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CaseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CourtOfficeId")
                        .HasColumnType("int");

                    b.Property<int>("CourtOfficeTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LicenceId")
                        .HasColumnType("int");

                    b.Property<int>("RoleTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CaseeId");

                    b.HasIndex("CaseStatusId");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("CourtOfficeId");

                    b.HasIndex("CourtOfficeTypeId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("LicenceId");

                    b.ToTable("Casees");
                });

            modelBuilder.Entity("Entities.Concrete.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Entities.Concrete.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Entities.Concrete.CourtOffice", b =>
                {
                    b.Property<int>("CourtOfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adderess")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId1")
                        .HasColumnType("int");

                    b.Property<string>("CourtOfficeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourtOfficeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LicenceId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourtOfficeId");

                    b.HasIndex("CityId1");

                    b.HasIndex("CourtOfficeTypeId");

                    b.HasIndex("LicenceId");

                    b.ToTable("CourtOffices");
                });

            modelBuilder.Entity("Entities.Concrete.CourtOfficeType", b =>
                {
                    b.Property<int>("CourtOfficeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourtOfficeTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourtOfficeTypeId");

                    b.ToTable("CourtOfficeTypes");
                });

            modelBuilder.Entity("Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LicenceId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("CityId");

                    b.HasIndex("LicenceId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entities.Concrete.Licence", b =>
                {
                    b.Property<int>("LicenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<string>("BillAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gb")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PersonTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SmsAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaxNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LicenceId");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Licences");
                });

            modelBuilder.Entity("Entities.Concrete.LicenceUser", b =>
                {
                    b.Property<int>("LicenceUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LicenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LicenceUserId");

                    b.HasIndex("LicenceId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("LicenceUsers");
                });

            modelBuilder.Entity("Entities.Concrete.OrderType", b =>
                {
                    b.Property<int>("OrderTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrderTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderTypeId");

                    b.ToTable("OrderTypes");
                });

            modelBuilder.Entity("Entities.Concrete.PersonType", b =>
                {
                    b.Property<int>("PersonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PersonTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonTypeId");

                    b.ToTable("PersonTypes");
                });

            modelBuilder.Entity("Entities.Concrete.ProcessType", b =>
                {
                    b.Property<int>("ProcessTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LicenceId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProcessTypeId");

                    b.HasIndex("LicenceId");

                    b.ToTable("ProcessTypes");
                });

            modelBuilder.Entity("Entities.Concrete.TaskType", b =>
                {
                    b.Property<int>("TaskTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LicenceId")
                        .HasColumnType("int");

                    b.Property<string>("TaskTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskTypeId");

                    b.HasIndex("LicenceId");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("Entities.Concrete.TransactionActivitySubType", b =>
                {
                    b.Property<int>("TransactionAcitivitySubTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LicenceId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionAcitivitySubTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionAcitivityTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionActivityTypeId")
                        .HasColumnType("int");

                    b.HasKey("TransactionAcitivitySubTypeId");

                    b.HasIndex("LicenceId");

                    b.HasIndex("TransactionActivityTypeId");

                    b.ToTable("TransactionAcitivitySubTypes");
                });

            modelBuilder.Entity("Entities.Concrete.TransactionActivityType", b =>
                {
                    b.Property<int>("TransactionActivityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TransactionActivityTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionActivityTypeId");

                    b.ToTable("TransactionActivityTypes");
                });

            modelBuilder.Entity("Entities.Concrete.AccountActivity", b =>
                {
                    b.HasOne("Entities.Concrete.AccountActivityStatus", "AccountActivityStatus")
                        .WithMany()
                        .HasForeignKey("AccountActivityStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.AccountActivityType", "AccountActivityType")
                        .WithMany()
                        .HasForeignKey("AccountActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Licence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.CaseStatus", b =>
                {
                    b.HasOne("Entities.Concrete.CourtOfficeType", "CourtOfficeType")
                        .WithMany()
                        .HasForeignKey("CourtOfficeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Licence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.CaseType", b =>
                {
                    b.HasOne("Entities.Concrete.CourtOfficeType", "CourtOfficeType")
                        .WithMany()
                        .HasForeignKey("CourtOfficeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Licence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Casee", b =>
                {
                    b.HasOne("Entities.Concrete.CaseStatus", "CaseStatus")
                        .WithMany()
                        .HasForeignKey("CaseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.CaseType", "CaseType")
                        .WithMany("Casees")
                        .HasForeignKey("CaseTypeId")
                        .IsRequired();

                    b.HasOne("Entities.Concrete.CourtOffice", "CourtOffice")
                        .WithMany("Casees")
                        .HasForeignKey("CourtOfficeId")
                        .IsRequired();

                    b.HasOne("Entities.Concrete.CourtOfficeType", "CourtOfficeType")
                        .WithMany("Casees")
                        .HasForeignKey("CourtOfficeTypeId")
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Customer", "Customer")
                        .WithOne("Casee")
                        .HasForeignKey("Entities.Concrete.Casee", "CustomerId")
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Licence", "Licence")
                        .WithMany("Casees")
                        .HasForeignKey("LicenceId")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.City", b =>
                {
                    b.HasOne("Entities.Concrete.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.CourtOffice", b =>
                {
                    b.HasOne("Entities.Concrete.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId1");

                    b.HasOne("Entities.Concrete.CourtOfficeType", "CourtOfficeType")
                        .WithMany()
                        .HasForeignKey("CourtOfficeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Licence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Customer", b =>
                {
                    b.HasOne("Entities.Concrete.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Licence", "Licence")
                        .WithMany("Customers")
                        .HasForeignKey("LicenceId")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Licence", b =>
                {
                    b.HasOne("Entities.Concrete.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.User", "User")
                        .WithOne("Licences")
                        .HasForeignKey("Entities.Concrete.Licence", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.LicenceUser", b =>
                {
                    b.HasOne("Entities.Concrete.Licence", "Licence")
                        .WithMany("LicenceUsers")
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.User", "User2")
                        .WithOne("LicenceUsers")
                        .HasForeignKey("Entities.Concrete.LicenceUser", "UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.ProcessType", b =>
                {
                    b.HasOne("Entities.Concrete.Licence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.TaskType", b =>
                {
                    b.HasOne("Entities.Concrete.Licence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.TransactionActivitySubType", b =>
                {
                    b.HasOne("Entities.Concrete.Licence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.TransactionActivityType", "TransactionActivityType")
                        .WithMany()
                        .HasForeignKey("TransactionActivityTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
